#ifndef _SEQLIST_
#define _SEQLIST_

#include<windows.h>
#include<stdio.h>
#include<assert.h>

typedef int DATATYPE;
#define MAXSIZE 10
typedef struct Seqlist
{
	DATATYPE array[MAXSIZE];
	int size;
}SeqList;

void InitSeqList(SeqList* pSeq);
void PushBack(SeqList* pSeq, DATATYPE data);
void PopBack(SeqList* pSeq);
void PushFront(SeqList* pSeq, DATATYPE data);
void PopFront(SeqList* pSeq);
void Insert(SeqList* pSeq, size_t pos, DATATYPE data);
void Erase(SeqList* pSeq, size_t pos);
void PrintSeqList(SeqList* pSeq);
int Find(SeqList* pSeq, DATATYPE data);
void Remove(SeqList* pSeq, DATATYPE data);
void RemoveAll(SeqList* pSeq, DATATYPE data);
void ButtleSort(SeqList* pSeq);
void SelectSort(SeqList* pSeq);
int BinarySearch(SeqList* pSeq, DATATYPE data);

#endif





#include "seqlist.h"

void InitSeqList(SeqList* pSeq)//初始化
{
	assert(pSeq);
	memset(pSeq->array, 0, sizeof(pSeq->array));
	pSeq->size = 0;
}

void PushBack(SeqList* pSeq, DATATYPE data)//尾插法
{
	assert(pSeq);
	if (pSeq->size >= MAXSIZE)
	{
		return;
	}
	else
	{
		pSeq->array[pSeq->size++] = data;
	}
}

void PopBack(SeqList* pSeq)//尾删法
{
	assert(pSeq);
	if (0 == pSeq->size)
	{
		return;
	}
	else
	{
		pSeq->size--;
	}
}

void PushFront(SeqList* pSeq, DATATYPE data)//头插法
{
	assert(pSeq);
	if (pSeq->size >= MAXSIZE)
	{
		return;
	}
	else
	{
		int i = 0;
		for (i = pSeq->size; i > 0; i--)
		{
			pSeq->array[i] = pSeq->array[i - 1];
		}
		pSeq->array[0] = data;
		pSeq->size++;
	}
}

void PopFront(SeqList* pSeq)//头删法
{
	assert(pSeq);
	if (0 == pSeq->size)
	{
		return;
	}
	else
	{
		int i = 0;
		for (i = 0; i < pSeq->size-1; i++)
		{
			pSeq->array[i] = pSeq->array[i + 1];
		}
		pSeq->size--;
	}
}

void Insert(SeqList* pSeq, size_t pos, DATATYPE data)//确定位置插入
{
	assert(pSeq);
	assert(pos <= pSeq->size);
	if (pSeq->size >= MAXSIZE)
	{
		return;
	}
	else
	{
		int i = 0;
		for (i = pSeq->size; i > pos; i--)
		{
			pSeq->array[i] = pSeq->array[i - 1];
		}
		pSeq->array[pos] = data;
		pSeq->size++;
	}
}

void Erase(SeqList* pSeq, size_t pos)//确定位置删除
{
	assert(pSeq);
	if (0 == pSeq->size)
	{
		return;
	}
	else
	{
		int i = 0;
		for (i = pos; i < pSeq->size - 1; i++)
		{
			pSeq->array[i] = pSeq->array[i + 1];
		}
		pSeq->size--;
	}
}

//void PrintSeqList(SeqList* pSeq)//打印
//{
//	assert(pSeq);
//	int i = 0;
//	for (i = 0; i < pSeq->size; i++)
//	{
//		printf("%d ", pSeq->array[i]);
//	}
//	printf("\n");
//}

int Find(SeqList* pSeq, DATATYPE data)//查找
{
	if (0 == pSeq->size)
	{
		return -1;
	}
	else
	{
		int i = 0;
		for (i = 0; i < pSeq->size; i++)
		{
			if (pSeq->array[i] == data)
			{
				return i;
			}
		}
		return -1;
	}
}

void Remove(SeqList* pSeq, DATATYPE data)//删除表中第一个值为data的元素
{
	assert(pSeq);
	if (0 == pSeq->size)
	{
		return;
	}
	else
	{
		int i = 0;
		for (i = 0; i < pSeq->size; i++)
		{ 
			if (pSeq->array[i] == data)
			{
				int j = 0;
				for (j = i; j < pSeq->size - 1; j++)
				{
					pSeq->array[j] = pSeq->array[j + 1];
				}
				pSeq->size--;
				break;
			}
		}
	}
}

//void RemoveAll(SeqList* pSeq, DATATYPE data)//删除表中值为data的元素
//{
//	assert(pSeq);
//	if (0 == pSeq->size)
//	{
//		return;
//	}
//	else
//	{
//		int i = 0;
//		int j = 0;
//		int count = 0;
//		for (i = 0; i < pSeq->size; i++)
//		{
//			if (data == pSeq->array[i])
//			{
//				for (j = i; j < pSeq->size - 1; j++)
//				{
//					pSeq->array[j] = pSeq->array[j + 1];
//				}
//				pSeq->size--;
//			}
//			else
//			{
//				count++;
//			}
//		}
//	}
//}

void RemoveAll(SeqList* pSeq, DATATYPE data)//删除表中值为data的元素
{
	assert(pSeq);
	if (0 == pSeq->size)
	{
		return;
	}
	else
	{
		int i = 0;
		int count = 0;
		for (i = 0; i < pSeq->size; i++)
		{
			if (data == pSeq->array[i])
			{
				count++;
			}
			else
			{
				if (0 == count)
					continue;
				pSeq->array[i - count] = pSeq->array[i];
			}
		}
		pSeq->size -= count;
	}
}

static void swap(DATATYPE *x, DATATYPE *y)//交换函数
{
	DATATYPE tmp = *x;
	*x = *y;
	*y = tmp;
	//*x ^= *y;
	//*y ^= *x;
	//*x ^= *y;
}

void ButtleSort(SeqList* pSeq)//冒泡排序
{
	assert(pSeq);
	int i = 0;
	int j = 0;
	for (i = 0; i < pSeq->size - 1;i++)
	{
		for (j = 0; j < pSeq->size - 1 - i; j++)
		{
			if (pSeq->array[j]>pSeq->array[j + 1])
			{
				swap(&pSeq->array[j], &pSeq->array[j + 1]);
			}
		}
	}
}

void SelectSort(SeqList* pSeq)//选择排序
{
	assert(pSeq);
	int i = 0;
	int j = 0;
	int min = 0;
	int max = pSeq->size - 1;
	for (i = 0; i <= pSeq->size/2; i++)
	{
		min = i;
		max = pSeq->size - i - 1;
		for (j = i; j < pSeq->size - i; j++)
		{
			
			if (pSeq->array[j] > pSeq->array[max])
			{
				max = j;
			}
			else if (pSeq->array[j] < pSeq->array[min])
			{
				min = j;
			}
		}
		swap(&pSeq->array[i], &pSeq->array[min]);
		swap(&pSeq->array[pSeq->size - 1 - i], &pSeq->array[max]);
	}
}

//int BinarySearch(SeqList* pSeq, DATATYPE data)//二分查找法
//{
//	assert(pSeq);
//	int start = 0;
//	int end = pSeq->size - 1;
//
//	while (start <= end)
//	{
//		int mid = start + (end - start) / 2;
//		if (data == pSeq->array[mid])
//		{
//			return mid + 1;
//		}
//		else if (data < pSeq->array[mid])
//		{
//			end = mid - 1;
//		}
//		else if (data > pSeq->array[mid])
//		{
//			start = mid + 1;
//		}
//	}
//	return -1;
//}

void PrintSeqList(SeqList* pSeq)//打印递归  逆序
{
	assert(pSeq);
	int start = 0;
	int end = pSeq->size - 1;
	PrintSeqList1(pSeq, start, end);
	int i = 0;
	for (i = 0; i < pSeq->size; i++)
	{
		printf("%d ", pSeq->array[i]);
	}
	printf("\n");
}
static DATATYPE PrintSeqList1(SeqList* pSeq, int start, int end)
{
	assert(pSeq);
	if (end < start)
	{
		return 0;
	}
	DATATYPE tmp = pSeq->array[start];
	pSeq->array[start] = pSeq->array[end];
	pSeq->array[end] = tmp;
	PrintSeqList1(pSeq, (start + 1), (end - 1));
}

int BinarySearch(SeqList* pSeq, DATATYPE data)  //二分查找法  递归实现
{
	assert(pSeq);
	int start = 0;
	int end = pSeq->size - 1;
	return BinarySearch1(pSeq, data, start, end);
}
static int BinarySearch1(SeqList* pSeq, DATATYPE data, int start, int end) 
{
	assert(pSeq);
	while (start <= end)
	{
		int mid = start + (end - start) / 2;
		if (data == pSeq->array[mid])
		{
			return mid + 1;
		}
		else if (data < pSeq->array[mid])
		{
			return BinarySearch1(pSeq, data, start, mid - 1);
		}
		else if (data > pSeq->array[mid])
		{
			return BinarySearch1(pSeq, data, mid + 1, end);
		}
	}
	return -1;
}










#include "seqlist.h"

void Function1()
{
	SeqList seq;
	InitSeqList(&seq);
	PushBack(&seq, 1);
	PushBack(&seq, 2);
	PushBack(&seq, 3);
	PushBack(&seq, 4);
	PushBack(&seq, 5);
	PopBack(&seq);
	PushFront(&seq, 0);
	PopFront(&seq);
}

void Function2()
{
	SeqList seq;
	InitSeqList(&seq);
	PushBack(&seq, 1);
	PushBack(&seq, 2);
	PushBack(&seq, 3);
	PushBack(&seq, 4);
	PushBack(&seq, 5);
	Insert(&seq, 3, 6);
	Erase(&seq, 3);
	PrintSeqList(&seq);
	int pos = Find(&seq, 3);
}

void Function3()
{
	SeqList seq;
	InitSeqList(&seq);
	PushBack(&seq, 1);
	PushBack(&seq, 2);
	PushBack(&seq, 2);
	PushBack(&seq, 3);
	PushBack(&seq, 2);
	PushBack(&seq, 4);
	PushBack(&seq, 2);
	PushBack(&seq, 5);
	PushBack(&seq, 2);
	Remove(&seq, 2);
	RemoveAll(&seq, 2);
	PrintSeqList(&seq);
}

void Function4()
{
	SeqList seq;
	InitSeqList(&seq);
	PushBack(&seq, 7);
	PushBack(&seq, 4);
	PushBack(&seq, 8);
	PushBack(&seq, 2);
	PushBack(&seq, 1);
	PushBack(&seq, 6);
	PushBack(&seq, 4);
	PushBack(&seq, 0);
	PushBack(&seq, 3);
	//ButtleSort(&seq);
	SelectSort(&seq);
	PrintSeqList(&seq);
	PrintSeqList(&seq);
	printf("\n%d\n",BinarySearch(&seq, 6));
}

int main()
{
	//Function1();
	//Function2();
	//Function3();
	Function4();
	system("pause");
	return 0;
}
