#include<stdio.h>
#include<windows.h>
#include<stdlib.h>
#define ROW 1000
#pragma warning (disable:4996)
typedef struct msg
{
	char name[10];
	char sex[10];
	char age[5];
	char tel[20];
	char address[20];
}Msg;
Msg message[ROW];
//打印菜单选项栏
void menu()
{
	printf("*************************************************************\n");
	printf("*************************************************************\n");
	printf("*******************  1. 添加联系人信息       ****************\n");
	printf("*******************  2. 删除指定联系人信息   ****************\n");
	printf("*******************  3. 查找指定联系人信息   ****************\n");
	printf("*******************  4. 修改指定联系人信息   ****************\n");
	printf("*******************  5. 显示所有联系人信息   ****************\n");
	printf("*******************  6. 清空所有联系人       ****************\n");
	printf("*******************  7. 以名字排序所有联系人 ****************\n");
	printf("*******************  0. 退出                 ****************\n");
	printf("*************************************************************\n");
	printf("*************************************************************\n");
}
//1.    添加联系人信息
int addMessage(Msg message[ROW], int count)
{
	char sign = 'y';
	while ((count < ROW) && ((sign == 'Y') || (sign == 'y')))
	{
		printf("name\tsex\tage\ttel\t\taddress\n");
		scanf("%s %s %s %s %s", &message[count].name, &message[count].sex,
			&message[count].age, &message[count].tel, &message[count].address);
		count++;
		printf("Congratulations,you successed addMessage!\n");
		printf("Can you want to addmessage again?(Y|N)\n");
		getchar();
		scanf("%c", &sign);
	}
	if (count >= ROW)
	{
		printf("Your mail list is full!\n");
	}
	if ((sign != 'n') && (sign != 'N'))
	{
		printf("error input!\n");
	}
	return count;
}
//2.    删除指定联系人信息
int deleteMessage(Msg message[ROW], int count)
{
	if (count == 0)
	{
		printf("Your mail list is empty!\n");
	}
	else
	{
		char name[10];
		printf("Please input the message's name you want to delete -> ");
		scanf("%s", name);
		int i = 0;
		for (i = 0; i < count; i++)
		{
			if (strcmp(name, message[i].name) == 0)
			{
				if (i == count - 1)
				{
					memset(&message[i], 0, sizeof(Msg));
					printf("Delete success!\n");
					return count - 1;
				}
				else
				{
					int j = 0;
					for (j = i; j < count - 1; j++)
					{
						strcpy(message[j].name, message[j + 1].name);
						strcpy(message[j].sex, message[j + 1].sex);
						strcpy(message[j].age, message[j + 1].age);
						strcpy(message[j].tel, message[j + 1].tel);
						strcpy(message[j].address, message[j + 1].address);
					}
					printf("Delete success!\n");
					return count - 1;
				}
			}
		}
		if (i == count)
		{
			printf("No man.\n");
		}
	}
	return count;
}
//3.    查找指定联系人信息
void findMessage(Msg message[ROW], int count)
{
	if (count)
	{
		printf("Please input the name of list you find ->");
		char name[10];
		scanf("%s", name);
		int i = 0;
		for (i = 0; i < count; i++)
		{
			if (strcmp(name, message[i].name) == 0)
			{
				printf("name\tsex\tage\ttel\t\taddress\n");
				printf("%s\t%s\t%s\t%s\t%s\n", message[i].name, message[i].sex,
					message[i].age, message[i].tel, message[i].address);
				break;
			}
		}
		if (i == count)
		{
			printf("no man!\n");
		}
	}
	else
	{
		printf("Your mail list is empty!\n");
	}
}
//4.    修改指定联系人信息
void changeMessage(Msg message[ROW], int count)
{
	if (count)
	{
		printf("Please input the name of list you want to change ->");
		char name[10];
		scanf("%s", name);
		int i;
		for (i = 0; i < count; i++)
		{
			if (strcmp(name, message[i].name) == 0)
			{
			again:	printf("Please input message you want to change(name|sex|age|tel|address)->");
				char input[10];
				char change[20];
				scanf("%s", input);
				if (strcmp(input, "name") == 0)
				{
					printf("Please input new name ->");
					scanf("%s", change);
					strcpy(message[i].name, change);
				}
				else if (strcmp(input, "sex") == 0)
				{
					printf("Please input sex ->");
					scanf("%s", change);
					strcpy(message[i].sex, change);
				}
				else if (strcmp(input, "age") == 0)
				{
					printf("Please input age ->");
					scanf("%s", change);
					strcpy(message[i].age, change);
				}
				else if (strcmp(input, "tel") == 0)
				{
					printf("Please input new tel ->");
					scanf("%s", change);
					strcpy(message[i].tel, change);
				}
				else if (strcmp(input, "address") == 0)
				{
					printf("Please input new address ->");
					scanf("%s", change);
					strcpy(message[i].address, change);
				}
				else
				{
					goto again;
				}
				printf("Congratulationgs,you successed changemessage!\n");
				printf("Are you want to changed again?(Y|N)\n");
				char s = 0;
				getchar();
				scanf("%c", &s);
				if ((s == 'y') || (s == 'Y'))
				{
					goto again;
				}
				if ((s == 'n') || (s == 'N'))
				{
					break;
				}
			}
		}
	}
	else
	{
		printf("Your mail list is empty!\n");
	}
}
//5.    显示所有联系人信息
void desplayMessage(Msg message[ROW], int count)
{
	if (count)
	{
		int i = 0;
		printf("name\tsex\tage\ttel\t\taddress\n");
		for (i = 0; i < count; i++)
		{
			printf("%s\t%s\t%s\t%s\t%s\n", message[i].name, message[i].sex,
				message[i].age, message[i].tel, message[i].address);
		}
	}
	else
	{
		printf("Your mail list is empty!\n");
	}
}
//6.    清空所有联系人
int clearMessage(Msg message[ROW], int count)
{
	memset(message, 0, ROW*sizeof(Msg));
	count = 0;
	desplayMessage(message, count);
	return count;
}
//7.    以名字排序所有联系人
void nameSort(Msg message[ROW], int count)
{
	if (count > 1)
	{
		Msg tmp;
		int i = 0;
		for (i = 0; i < count - 1; i++)
		{
			int j = 0;
			for (j = i + 1; j < count; j++)
			if (strcmp(message[i].name, message[j].name) > 0)
			{
				tmp = message[i];
				message[i] = message[j];
				message[j] = tmp;
			}
		}
	}
	desplayMessage(message, count);
}
int main()
{
	int input = 0;
	int count = 0;
	menu();
	while (1)
	{
		printf("Please choose <0—7> : ");
		scanf("%d", &input);
		switch (input)
		{
		case 0:
			exit(0);
			break;
		case 1:
			count = addMessage(message, count);
			break;
		case 2:
			count = deleteMessage(message, count);
			break;
		case 3:
			findMessage(message, count);
			break;
		case 4:
			changeMessage(message, count);
			break;
		case 5:
			desplayMessage(message, count);
			break;
		case 6:
			count = clearMessage(message, count);
			break;
		case 7:
			nameSort(message, count);
			break;
		default:
			printf("error input!\n");
			break;
		}
	}
	system("pause");
	return 0;
}
