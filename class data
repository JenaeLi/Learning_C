#include<iostream>
using namespace std;

class Data
{
public:
	Data(int year = 1900, int month = 1, int day = 1)
		: _year(year)
		, _month(month)
		, _day(day)
	{
		if (!isLegalData(year, month, day))
		{
			_year = 1900;
			_month = 1;
			_day = 1;
		}
	}
	Data(const Data & d)
	{
		_year = d._year;
		_month = d._month;
		_day = d._day;
	}
	~Data()
	{}
	Data& operator=(const Data& d)
	{
	 	this->_year = d._year;
		this->_month = d._month;
		this->_day = d._day;
		return *this;
	}

	Data operator +(const int& days)
	{
		if (days < 0)
		{
			return *this - (-days);
		}
		_day += days;
		while (_day > getMonthDay(_year, _month))
		{
			_day -= getMonthDay(_year, _month);
			_month += 1;
			if (_month > 12)
			{
				_year += 1;
				_month = 1;
			}
		}
		return *this;
	}
	Data operator -(const int& days)
	{
		if (days < 0)
		{
			return *this + (-days);
		}
		_day -= days;
		while (_day < 0)
		{
			_month -= 1;
			if (_month < 1)
			{
				_year -= 1;
				_month = 12;
			}
			_day += getMonthDay(_year, _month);
		}
		return *this;
	}
	int operator -(const Data& d)
	{
		int day = 0;
		if (*this > d)
		{
			Data tmp = d;
			while (*this != tmp)
			{
				tmp = tmp + 1;
				day += 1;
			}
		}
		else
		{
			Data tmp = *this;
			while (tmp != d)
			{
				tmp = tmp + 1;
				day += 1;
			}
		}
		return day;
	}

	bool operator >(const Data& d)
	{
		if ((_year > d._year) ||
			((_year == d._year) && (_month > d._month)) ||
			((_year == d._year) && (_month == d._month) && (_day > d._day)))
		{
			return true;
		}
		return false;
	}
	bool operator ==(const Data& d)
	{
		if ((_year == d._year) && (_month == d._month) && (_day == d._day))
		{
			return true;
		}
		return false;
	}
	bool operator !=(const Data& d)
	{
		if (!((_year == d._year) && (_month == d._month) && (_day == d._day)))
		{
			return true;
		}
		return false;
	}
	bool operator <(const Data& d)
	{
		if (!((*this>d) || (*this == d)))
		{
			return true;
		}
		return false;
	}

	Data& operator++()//前置++
	{
		if (_day < getMonthDay(_year, _month))
		{
			++_day;
		}
		else
		{
			if (_month == 12)
			{
				++_year;
				_month = 1;
			}
			else
			{
				++_month;
			}
			_day = 1;
		}
		return *this;
	}
	Data& operator++(int)//后置++
	{
		Data tmp = *this;
		operator++();
		return tmp;
	}
	Data& operator--()//前置--
	{
		if (_day == 1)
		{
			if (_month == 1)
			{
				--_year;
				_month = 12;
			}
			else
			{
				--_month;
			}
			_day = getMonthDay(_year, _month);
		}
		else
		{
			--_day;
		}
		return *this;
	}
	Data operator--(int)//后置--
	{
		Data tmp(*this);
		operator--();
		return tmp;
	}

	friend ostream& operator<<(ostream& _cout, const Data& d)
	{
		_cout << d._year << "-" << d._month << "-" << d._day;
		return _cout;
	}


	bool isLeapYear()
	{
		if (((0 == _year % 4) && (0 == _year % 100)) || (0 == _year % 400))
		{
			return true;
		}
		return false;
	}
	bool isLeapYear(int year)
	{
		if (((0 == year % 4) && (0 != year % 100)) || (0 == year % 400))
		{
			return true;
		}
		return false;
	}

private:
	bool isLegalData(int year, int month, int day)
	{
		if ((year > 0) &&
			(month > 0 || month < 13) &&
			(day > 0 || day <= getMonthDay(year , month)))
		{
			return true;
		}
		return false;
	}
	int getMonthDay(int year, int month)
	{
		int monthday[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
		if ((2 == month) && isLeapYear(year))
		{
			monthday[2] += 1;
		}
		return monthday[month];
	}

private:
	int _year;
	int _month;
	int _day;
};

void FunTest()
{
	Data d1(2017, 12, 30);
	Data d2(2017, 1, 2);
	d1++;
	++d1;
	--d2;
	d2--;
	cout << d1 << endl;
}

int main()
{
	FunTest();
	system("pzuse");
	return 0;
}

